version: '3.8'

services:
  # Service Discovery
  eureka-service:
    build:
      context: ./backend
      dockerfile: eureka-service/Dockerfile
    ports:
      - "8761:8761"
    networks:
      - app-network

  # API Gateway
  api-gateway-service:
    build:
      context: ./backend
      dockerfile: api-gateway-service/Dockerfile
    ports:
      - "8090:8090"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
    depends_on:
      - eureka-service
    networks:
      - app-network

  # Services métiers avec leurs bases de données
  answer-service:
    build:
      context: ./backend
      dockerfile: answer-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo-answer-db:27017/answerdb
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
    depends_on:
      - mongo-answer-db
      - eureka-service
    networks:
      - app-network

  mongo-answer-db:
    image: mongo:5.0
    container_name: mongo-answer-db
    volumes:
      - mongo-answer-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  exam-service:
    build:
      context: ./backend
      dockerfile: exam-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-exam-db:3306/examdb
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
    depends_on:
      - mysql-exam-db
      - eureka-service
    networks:
      - app-network

  course-service:
    build:
      context: ./backend
      dockerfile: course-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-exam-db:3306/examdb
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
    depends_on:
      - mysql-exam-db
      - eureka-service
    networks:
      - app-network

  mysql-exam-db:
    image: mysql:8.0
    container_name: mysql-exam-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysql-exam-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  user-service:
    build:
      context: ./backend
      dockerfile: user-service/Dockerfile
    ports:
      - "8084:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user-db:5432/userdb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_PROFILES_ACTIVE=prod
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-service:8761/eureka
    depends_on:
      - postgres-user-db
      - eureka-service
    networks:
      - app-network

  postgres-user-db:
    image: postgres:13
    container_name: postgres-user-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-user-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Frontend Angular
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - api-gateway-service
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-answer-data:
  mysql-exam-data:
  postgres-user-data: